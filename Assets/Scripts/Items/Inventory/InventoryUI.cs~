using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

/// <summary>
/// Handles the inventory UI.
/// </summary>

public class InventoryUI : MonoBehaviour
{
    public Transform slotParent;                // the parent transform of the inventory slots
    public TextMeshProUGUI titleText;           // the title text component

    InventoryManager inventory;                 // reference to the inventory manager

    InventorySlot[] inventorySlots;             // an array of inventory slots

    void Start()
    {
        inventory = InventoryManager.instance;
        inventory.onItemChangedCallback += UpdateUI;

        inventorySlots = slotParent.GetComponentsInChildren<InventorySlot>();

        UpdateUI();
    }

    /// <summary>
    /// Iterates through all inventory items and updates the UI.
    /// </summary>

    public void UpdateUI()
    {
        switch(inventory.currentInventory)
        {
            case InventoryType.None:

                break;

            case InventoryType.Equipment:
                UpdateTitle("Equipment");
                PopulateSlots(inventory.equipment);
                break;

            case InventoryType.Usable:
                UpdateTitle("Usables");
                PopulateSlots(inventory.usableItems);
                break;

            case InventoryType.Quest:
                UpdateTitle("Quest item");
                PopulateSlots(inventory.questItems);
                break;
        }
    }

    /// <summary>
    /// Updates the title of the inventory window.
    /// </summary>
    /// <param name="title">the active title</param>

    void UpdateTitle(string title)
    {
        titleText.text = title;
    }

    /// <summary>
    /// Responsible for populating theinventory slots.
    /// </summary>
    /// <param name="items">a list of items to populate the slots with</param>

    void PopulateSlots(List<Item> items)
    {
        for (int i = 0; i < inventorySlots.Length; i++)
        {
            if (i < inventory.questItems.Count)
            {
                inventorySlots[i].AddItem(items[i]);
            }
            else
            {
                inventorySlots[i].ClearSlot();
            }
        }
    }
}
